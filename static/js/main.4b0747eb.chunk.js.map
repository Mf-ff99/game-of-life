{"version":3,"sources":["Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","href","operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","onClick","Math","random","style","display","gridTemplateColumns","map","col","width","height","backgroundColor","border","newGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b0747eb.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\nexport default function Header() {\r\n\r\n    return (\r\n        <header>\r\n            <h1><a href=\"https://github.com/Mf-ff99\">\r\n                @markJforce\r\n                </a>\r\n                </h1>\r\n        </header>\r\n    )\r\n}","import React, { useState, useCallback, useRef } from 'react'\nimport produce from 'immer'\nimport './App.css';\nimport Header from './Header/Header'\n\nconst numRows = 25\nconst numCols = 50\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n]\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0))\n  }\n\n  return rows;\n}\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false)\n\n  const runningRef = useRef()\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0\n            operations.forEach(([x, y]) => {\n              const newI = i + x\n              const newK = k + y\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK]\n              }\n            })\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1\n            }\n          }\n        }\n      })\n    })\n    setTimeout(runSimulation, 50)\n  }, [])\n\n  return (\n    <section className='game-box'>\n      <Header />\n      <div className=\"btn-container\">\n\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >{running ? 'stop' : 'start'}</button>\n        <button\n          onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n              rows.push(Array.from(Array(numCols), () => Math.random() > .8 ? 1 : 0))\n            }\n\n            setGrid(rows);\n          }}\n        >random</button>\n        <button\n          onClick={() => {\n            setGrid(generateEmptyGrid());\n          }}\n        >clear</button>\n      </div>\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      }}\n        className=\"grid\">\n        {grid.map((rows, i) =>\n          rows.map((col, k) =>\n            <div className=\"grid-item\" key={`${i}-${k}`}\n              style={{\n                width: 20, height: 20, backgroundColor: grid[i][k] ? '#00A6FB' :  '#0c3a52',\n                border: \"solid 1px gray\"\n              }}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                })\n                setGrid(newGrid)\n\n              }}\n            />))}\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}